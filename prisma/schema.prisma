// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Add enums
enum Priority {
  NONE
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Emotion {
  EXCITED
  NEUTRAL
  ANXIOUS
  OVERWHELMED
  CONFIDENT
}

// New enum for recurrence frequency
enum RecurrenceFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  CUSTOM
}

// New enum for tracking change types
enum ChangeType {
  CREATED
  UPDATED
  COMPLETED
  DELETED
  RESTORED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  accounts       Account[]
  sessions       Session[]
  projects       Project[]
  tasks          Task[]
  categories     Category[]
  focusSessions  FocusSession[]
  settings       UserSettings?
  templates      TaskTemplate[]
  recurringTasks RecurringTask[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSettings {
  id                   String  @id @default(cuid())
  userId               String  @unique
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme                String  @default("light")
  enableNotifications  Boolean @default(true)
  enableSoundEffects   Boolean @default(true)
  defaultPomodoroTime  Int     @default(25)
  defaultShortBreak    Int     @default(5)
  defaultLongBreak     Int     @default(15)
  tasksPerPage         Int     @default(10)
  enableFocusMode      Boolean @default(false)
  enableEmotionalTags  Boolean @default(true)
  preferredWorkingHours Json?  // Store working hours preferences as JSON
  notificationSettings Json?   // Store notification preferences as JSON
  
  @@index([userId])
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  goals       Goal[]
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([userId])
}

model Goal {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  tasks       Task[]
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([projectId])
}

model Task {
  id                String     @id @default(cuid())
  title            String
  description      String?     @db.Text
  priority         Priority    @default(NONE)
  emotion          Emotion?
  dueDate          DateTime?
  completedAt      DateTime?
  estimatedDuration Int?
  actualDuration   Int?       // In minutes
  userId           String
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalId           String?
  goal             Goal?      @relation(fields: [goalId], references: [id], onDelete: SetNull)
  categories       Category[] @relation("CategoryToTask")
  parentId         String?
  parent           Task?      @relation("TaskToSubtasks", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subtasks         Task[]     @relation("TaskToSubtasks")
  recurringTaskId  String?
  recurringTask    RecurringTask? @relation(fields: [recurringTaskId], references: [id], onDelete: SetNull)
  focusSessions    FocusSession[]
  history          TaskHistory[] // Relation to the new TaskHistory model
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  
  @@index([userId])
  @@index([goalId])
  @@index([parentId])
  @@index([recurringTaskId])
}

model Category {
  id        String         @id @default(cuid())
  name      String
  color     String        @default("#000000")
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks     Task[]        @relation("CategoryToTask")
  templates TaskTemplate[] @relation("CategoryToTemplate")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@unique([name, userId])
  @@index([userId])
}

model FocusSession {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime?
  duration  Int      // In minutes
  type      String   // "pomodoro", "custom"
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId    String?
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([userId])
  @@index([taskId])
}

model RecurringTask {
  id                String   @id @default(cuid())
  templateId        String
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  nextDueDate       DateTime
  tasks             Task[]
  // New fields for enhanced recurrence
  frequency         RecurrenceFrequency @default(DAILY)
  interval          Int     @default(1)  // Repeat every X days, weeks, etc.
  daysOfWeek        String? // JSON string for weekly recurrence (e.g. "[1,3,5]" for Mon,Wed,Fri)
  dayOfMonth        Int?    // For monthly recurrence
  monthOfYear       Int?    // For yearly recurrence
  startDate         DateTime @default(now())
  endDate           DateTime?
  count             Int?    // Number of occurrences
  lastGeneratedDate DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([templateId, userId])
  @@index([userId])
  @@index([templateId])
  @@index([nextDueDate])
}

model TaskTemplate {
  id                String     @id @default(cuid())
  name              String
  description       String?    @db.Text
  priority          Priority   @default(NONE)
  estimatedDuration Int?
  emotion           Emotion?
  userId            String
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories        Category[] @relation("CategoryToTemplate")
  isRecurring       Boolean    @default(false)
  recurrence        Json?      // Stores frequency, interval, and other recurrence rules
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@unique([name, userId])
  @@index([userId])
}

// New model to track task history
model TaskHistory {
  id            String      @id @default(cuid())
  taskId        String
  task          Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId        String
  changeType    ChangeType
  changeData    String      @db.Text // JSON string of changed fields
  previousData  String?     @db.Text // JSON string of previous values
  createdAt     DateTime    @default(now())
  
  @@index([taskId, createdAt])
  @@index([userId])
}
